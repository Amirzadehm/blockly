{namespace mazepage}

/**
 * This is a Closure Template.  Build multilingually:
 *
 * # Create en.js if that's the only language you care about.
 * java -jar ../_soy/SoyToJsSrcCompiler.jar --outputPathFormat generated/en.js --srcs templateLevel2.soy,templateLevel1.soy,template.soy,../common.soy
 *
 * # To fully internationalize, follow these steps...
 * # Extract messages from template.soy.
 * java -jar ../_soy/SoyMsgExtractor.jar --outputFile extracted_msgs.xlf template.soy
 *
 * # Create en.json, qqq.json.
 * ../../i18n/xliff_to_json.py --xlf extracted_msgs.xlf
 *
 * Once translations have been made into <LANG>.json:
 *
 * # Create *.js for each *.json file.  By default, qqq.json and keys.json are skipped.
 * ../../i18n/json_to_js.py --path_to_jar=../_soy *.json
 */

/**
 * Web page structure.
 */
{template .start}
  <div id="start_blocks" style="display:none">
    {call .startBlocks /}
  </div>
  <div id="MSG" style="display: none">
    <span id="moveForward">{msg meaning="Karel.moveForward" desc="verb -
      imperative or infinitive for a person moving (walking) in the direction
      he/she is facing."}move forward{/msg}</span>
    // Nan's
    <span id="putDownBall">{msg meaning="Karel.putDownBall" desc="verb -
      imperative or infinitive for a person putting down a ball."}fill 1{/msg}</span>    
    <span id="putDown5">{msg meaning="Karel.putDown5" desc="place 5 balls on the square."}
      put down 5{/msg}</span>
    <span id="pickUpBall">{msg meaning="Karel.pickUpBall" desc="verb -
      imperative or infinitive for a person picking up a ball."}remove 1{/msg}</span>    
    <span id="while">{msg meaning="Karel.while" desc="condensed form of 'while
      something is true'"}while{/msg}</span>
    <span id="ballsPresent">{msg meaning="Karel.ballsPresent" desc="Indicates
      the presence of at least one ball, as in 'he brought a ball, there
      are now balls present'"}there is a pile{/msg}</span>
    <span id="holesPresent">{msg meaning="Karel.holesPresent" desc="Indicates
      the lack of any balls, as in 'she took the last ball, there
      are now no balls present'"}there is a hole{/msg}</span>
    <span id="turnLeft">{msg meaning="Karel.turnLeft" desc="verb - imperative
      or infinitive for a person turning his head and body one quarter rotation
      counter-clockwise.  Prefer a translation that has text in common with the
      translation of 'turn right'.  See [[Translating:Blockly#Drop-Down_Menus]]."}
      turn left{/msg}</span>
    <span id="turnRight">{msg meaning="Karel.turnRight" desc="verb - imperative
      or infinitive for a person turning his head and body one quarter rotation
      clockwise. Prefer a translation that has text in common with the
      translation of 'turn left'.  See [[Translating:Blockly#Drop-Down_Menus]]."}
      turn right{/msg}</span>
    <span id="doCode">{msg meaning="Karel.doCode" desc="verb - imperative or
      infinitive preceding one or more commands to a person."}do{/msg}</span>
    <span id="elseCode">{msg meaning="Karel.elseCode" desc="conjunction -
      'otherwise', introducing commands to be performed if a previous condition
      was not true, as in 'if x>3, do this, else do that'."}else{/msg}</span>
    <span id="pathAhead">{msg meaning="Karel.pathAhead" desc="condensed form of
      'if there is a path ahead', as in: 'if path ahead, go forward'."}path ahead{/msg}</span>
    <span id="pathLeft">{msg meaning="Karel.pathLeft" desc="condensed form of 'if
      there is a path to the left', as in: 'if path to the left, turn left'."}path to the left{/msg}</span>
    <span id="pathRight">{msg meaning="Karel.pathRight" desc="condensed form of
      'if there is a path to the right', as in: 'if path to the right, turn
      right'."}path to the right{/msg}</span>
    <span id="noPathAhead">{msg meaning="Karel.noPathAhead" desc="condensed form of
      'if there is a no path ahead', as in: 'if no path ahead, go forward'."}path is blocked{/msg}</span>
    <span id="noPathLeft">{msg meaning="Karel.noPathLeft" desc="condensed form of 'if
      there is a no path to the left', as in: 'if no path to the left, turn left'."}no path to the left{/msg}</span>
    <span id="noPathRight">{msg meaning="Karel.noPathRight" desc="condensed form of
      'if there is a no path to the right', as in: 'if no path to the right, turn
      right'."}no path to the right{/msg}</span>
    <span id="repeatUntilBlocked">{msg meaning="Karel.repeatUntilBlocked" desc="verb -
      imperative or infinitive to repeat the following commands.  The phrase is
      followed by the symbol denoting the end of the maze."}while path ahead{/msg}</span>
    <span id="repeatUntilFinish">{msg meaning="Karel.repeatUntilFinish" desc="verb -
      imperative or infinitive to repeat the following commands.  The phrase is
      followed by the symbol denoting the end of the maze."}repeat until finish{/msg}</span>
    <span id="repeatWhileCurrentNotClear">{msg meaning="Karel.repeatWhileCurrentNotClear" desc="verb -
      imperative or infinitive to repeat the following commands.  The phrase is
      followed by the symbol denoting the end of the maze."}while{/msg}</span>
    <span id="moveForwardTooltip">{msg meaning="Karel.moveForwardTooltip"
      desc="tooltip (pop-up help) - Pegman is the humanoid icon used in Google Maps.
      See picture at http://goo.gl/9I64i (http://maps.google.com/intl/en/help/maps/streetview/learn/pegman.html).
      The term 'space' refers to a single square within a maze."}Move me forward one space.{/msg}</span>
    <span id="q4wrong">{msg meaning="Karel.q4wrong" desc="tracking is suggesting
      to the user that they should follow each instruction and follow how that
      will affect the movement. A 'program' is a set of instructions that tell
      the computer what to do next."}No - Try tracking my direction while
      following the program.{/msg}</span>
    <span id="q4right">{msg meaning="Karel.q4right" desc="Congratulating the
      user on correctly answering the question."}That's right! Good job.{/msg}</span>
    <span id="q5wrong">{msg meaning="Karel.q5wrong" desc="tracking is suggesting
    to the user that they should follow each instruction and follow how that
    will affect the movement. A 'program' is a set of instructions that tell
    the computer what to do next."}No - Try tracking my direction while following
    the program.{/msg}</span>
    <span id="q5right">{msg meaning="Karel.q5right" desc="Congratulating the user
      on correctly answering the question."}You got it right!{/msg}</span>
    <span id="q10wrong">{msg meaning="Karel.q10wrong" desc="tracking is suggesting
      to the user that they should follow each instruction and follow how that
      will affect the movement. A 'program' is a set of instructions that tell
      the computer what to do next."}No - Try tracking my direction while
      following the program.{/msg}</span>
    <span id="q10right">{msg meaning="Karel.q10right" desc="Congratulating the
      user on correctly answering the question."}That's right!{/msg}</span>
    <span id="turnTooltip">{msg meaning="Karel.turnTooltip" desc="tooltip
      (pop-up help) - Pegman is the humanoid icon used in Google Maps.
      See picture at http://goo.gl/9I64i
      (http://maps.google.com/intl/en/help/maps/streetview/learn/pegman.html).
      The term 'space' refers to a single square within a maze."}Turns me
      left or right by 90 degrees.{/msg}</span>
    <span id="ifTooltip">{msg meaning="Karel.ifTooltip" desc="tooltip
      (pop-up help) - 'path' refers to a path through a maze. "}If there is a
      path in the specified direction, then do some actions.{/msg}</span>
    <span id="ifelseTooltip">{msg meaning="Karel.ifelseTooltip" desc="tooltip
      (pop-up help) - 'path' refers to a path through a maze."}If there is a
      path in the specified direction, then do the first block of actions.
      Otherwise, do the second block of actions.{/msg}</span>
    <span id="whileTooltip">{msg meaning="Karel.whileTooltip" desc="tooltip
      (pop-up help) - Repeat the enclosed commands until the maze has been
      successfully completed (the end point reached)."}Repeat the enclosed
      actions until finish point is reached.{/msg}</span>
    <span id="capacity0">{msg meaning="Karel.capacity0" desc="warning - No more
      blocks may be added until some are removed.  Do not alter the portions
      between pointy brackets (< and >), although you may move them within the
      phrase and replace 0 with one or more words."}You have
      <span id='capacityNumber'>0</span> blocks left.{/msg}</span>
    <span id="capacity1">{msg meaning="Karel.capacity1" desc="warning - Only one
      more block may be added.  Do not alter the portions between pointy brackets
      (< and >), although you may move them within the phrase and replace 1 with
      one or more words."}You have <span id='capacityNumber'>1</span> block left.{/msg}</span>
    <span id="capacity2">{msg meaning="Karel.capacity2" desc="warning - Only %1
      more blocks may be used, where %1 is an integer greater than 1.  Do not
      alter the portions between pointy brackets (< and >), although you may
      move them within the phrase."}You have <span id='capacityNumber'>%1</span> blocks left.{/msg}</span>
    <span id="nextLevel">{msg meaning="Karel.nextLevel" desc="alert - This is
      displayed when the user solves the maze, inviting them to precede to the
      next level of difficulty."}
      Congratulations! You have completed this level.{/msg}</span>
    <span id="finalLevel">{msg meaning="Karel.finalLevel" desc="alert - This is
      displayed when the user solves the most difficult level."}
      Congratulations! You have solved the final level.{/msg}</span>
    <span id="oneTopBlock">{msg meaning="Karel.oneTopBlock" desc="alert - This is
      displayed if a user attempts to run a program composed of multiple stacks
      of blocks, letting them know they need to create a single stack."}On this
      level, you need to stack together all of the blocks in the white workspace.{/msg}</span>
    <span id="putdownTower">{msg meaning="Karel.putdownTower" desc="Place a tower on the ground"}
      put down tower{/msg}</span>
    <span id="pickupTower">{msg meaning="Karel.pickupTower" desc="Place a tower up off the ground"}
      pickup tower{/msg}</span>
  </div>

  // Common messages follow.  They are inlined here and in the other
  // apps/*/template.soy files instead of being shared in the parent directory
  // in order to avoid:
  // - loading an additional file over the network.
  // - keeping track of which languages have translated common messages.
  // Messages in the other apps' template.soy files reference these to
  // minimize extra work for translators.
  <table width="100%" {call apps.menu}{param menu: $ij.menu /}{/call}>
    <tr>
      <td>
        <h1>
          <span id="title">
            <a href="../index.html">{{msg meaning="Apps.blocklyMessage" desc="The project name.  If readers of your language would know approximately how to pronounce 'Blockly', leave unchanged.  Otherwise, include a transliteration in parentheses, such as the Russian: 'Blockly (Блoкли)'.  This should be identical to {lb}{lb}msg-blockly|Maze-Apps.blocklyMessage{rb}{rb}."}}Blockly{{/msg}}</a>
            {sp}:{sp}
            {msg meaning="Karel.maze" desc="brief title - Specifies that this is Blockly's '''Maze''' tutorial."}
              Farmer&nbsp;&nbsp;{$ij.page}
            {/msg}
          </span>
          {sp}&nbsp;{sp}
          {for $i in range(1, $ij.maxLevel + 1)}
            {sp}
            {if $i == $ij.level}
              {if $i > 9}
                <span class="selected doubleDigit tab">{$i}</span>
              {else}
                <span class="selected singleDigit tab">{$i}</span>
              {/if}
            {else}
              {if $i < $ij.level}
                <a class="tab previous" href="?page={$ij.page}&lang={$ij.lang}&level={$i}&skin={$ij.skin}">{$i}</a>
              {else}
                <a class="tab" href="?page={$ij.page}&lang={$ij.lang}&level={$i}&skin={$ij.skin}">{$i}</a>
              {/if}
            {/if}
          {/for}
        </h1>
      </td>
      <td class="farSide">
        <select id="languageMenu" onchange="BlocklyApps.changeLanguage();"></select>
        {sp}&nbsp;{sp}
        <button id="pegmanButton" onmousedown="Maze.showPegmanMenu();">
          <img src="../media/1x1.gif">
          <span>&#x25BE;</span>
        </button>
      </td>
    </tr>
  </table>

  /**
   * For processing the window input after finishing a level.
   */
  <div id="levelFeedback">
    <div style="padding-bottom: 0.7ex;"><br>
      <textarea id="levelFeedbackText" rows=3 cols=40 style="resize: none;
        border: 0; text-align: center; overflow: hidden; font-size: 16pt;
        font-family: Arial;">
        {if $ij.page == 1}
          {switch $ij.level}
            {case 1, 2}
              {msg meaning="Karel.hint1_1" desc="hint - 'block' refers to a
               child's stackable toys."}
                  You could solve this level with fewer blocks. Can you find
                  a solution with fewer blocks?
              {/msg}
            {case 3}
              {msg meaning="Karel.hint1_3" desc="hint - A 'repeat' block is used
               to repeat blocks over and over."}
                 There is a solution using only 3 blocks. Can you find it? Did
                 you using the repeat block?
              {/msg}
            {case 4}
              {msg meaning="Karel.hint1_4" desc="TODO"}
                 Can you find a solution using only 4 blocks? Try using one of
                 the green loop blocks.
              {/msg}
            {case 5}
              {msg meaning="Karel.hint1_5" desc="hint - A 'repeat' block is used
                to repeat blocks over and over."}
                 Can you find a solution using 4 blocks? Try putting a loop
                 inside of another loop. Remember, loop blocks are green.
              {/msg}
            {case 6}
              {msg meaning="Karel.hint1_6" desc="hint - A 'repeat' block is used
               to repeat blocks over and over. The red marker is the goal to
               be reached in the maze."}
                 There is a solution using only 3 blocks. Can you find it? Did you try the new option on the while block?
              {/msg}
            {case 7}
              {msg meaning="Karel.hint1_7" desc="hint - A 'repeat' block is used
                to repeat blocks over and over. The red marker is the goal to
                be reached in the maze."}
                  Can you use the while block to complete the level with
                  only 4 blocks?
              {/msg}
            {case 8}
              {msg meaning="Karel.hint1_8" desc="TODO"}
                 There is a solution using only 3 blocks. Can you find it?za
              {/msg}
            {case 9}
              {msg meaning="Karel.hint1_9" desc="hint - A 'repeat' block is used
                to repeat blocks over and over. The red marker is the goal to
                be reached in the maze."}
                  Could you use two while blocks to complete this level with
                  fewer total blocks?
                {/msg}
            {case 10}
              {msg meaning="Karel.hint1_10" desc="hint - A 'repeat' block is used
               to repeat blocks over and over."}
                 Can you find a solution using 4 blocks? Try including an if block.
              {/msg}
            {case 11}
              {msg meaning="Karel.hint1_11" desc="hint - A 'repeat' block is used
               to repeat blocks over and over."}
                 Can you find a solution using 6 blocks? Try including 2 if blocks.
              {/msg}
          {/switch}
        {elseif $ij.page == 2}
          {switch $ij.level}
            {case 1}
              {msg meaning="Karel.hint2_1" desc="TODO"}
                Use only the blocks you need to get to complete the level.{/msg}
            {case 2}
              {msg meaning="Karel.hint2_2" desc="TODO"}
                Can you find a solution using 2 blocks? Try using the given function(s).{/msg}
            {case 3}
              {msg meaning="Karel.hint2_3" desc="TODO"}
                Can you find a solution using 3 blocks? Try using the given function(s) inside a while block.{/msg}
            {case 4}
              {msg meaning="Karel.hint2_4" desc="TODO"}
                Could you use fewer blocks? Try defining your own function and using it inside one of the loop blocks.{/msg}
            {case 5}
              {msg meaning="Karel.hint2_5" desc="TODO"}
                Could you use fewer blocks? Try defining your own function and using it inside one of the loop block.{/msg}
            {case 6}
              {msg meaning="Karel.hint2_6" desc="TODO"}
                Can you find a solution using 4 blocks? Try using the given function(s).{/msg}
            {case 7}
              {msg meaning="Karel.hint2_7" desc="TODO"}
                Can you find a solution by adding 8 blocks in the "avoid the cow and remove 1" block?{/msg}
            {case 8}
              {msg meaning="Karel.hint2_8" desc="TODO"}
                Can you find a solution using 2 blocks? Try using the given function(s) inside one of the loop blocks.{/msg}
            {case 9}
              {msg meaning="Karel.hint2_9" desc="TODO"}
                Can you find a solution using 4 blocks? Try including an if block.{/msg}
            {case 10}
              {msg meaning="Karel.hint2_10" desc="TODO"}
                Can you find a solution using fewer blocks? Try including two if blocks.{/msg}
          {/switch}
        {/if}
    </textarea>
    /**
     * Interstitial levels.
     */
    <div id="interstitial" style="display: none;">
    /**
     * Show image above avatar for these reinf levels.
     */
    {if $ij.level == 2}
      <img style="margin-left: 110px;" src="repeat_block.png">
    {/if}
    <br>
    <div id="reinfbubble">
      <span id="reinfMsg">
        {switch $ij.level}
          /* {case 2}
            {msg meaning="Karel.reinfMsg2" desc="instructions - 'block' refers
              to a child's stackable toys. A 'repeat' block is used to repeat
              blocks over and over. The red marker is the goal to be reached
              in the maze."}A repeat block repeats the blocks inside it until
              I reach the red marker.{/msg}
          {case 3}
            {msg meaning="Karel.reinfMsg3" desc="instructions - 'program'
              refers to a series of instructions that tell the computer
              what to do next."}You have just written some programs. Good job!{/msg}
          {case 4}
            {msg meaning="Karel.reinfMsg4" desc="instructions - program'
              refers to a series of instructions that tell the computer
              what to do next."}Which direction am I facing after this
              program ends?{/msg}
          {case 5}
            {msg meaning="Karel.reinfMsg5" desc="instructions - An example
              of an 'if' block is if there is a path to the left, turn
              left."}Here is an if block: I will turn left if there is a
              path to the left.{/msg}
          {case 6}
            {msg meaning="Karel.reinfMsg6" desc="instructions - An example
              of an 'if' block is if there is a path to the left, turn left.
              A 'repeat' block is used to repeat blocks over and over.
              'program' refers to a series of instructions that tell the
              computer what to do next."}We can place 'if' blocks inside
              'repeat' blocks. Where am I when this program ends?
              Click on the correct picture below.{/msg}
          {case 7}
            {msg meaning="Karel.reinfMsg7" desc="instructions - A 'repeat'
              block is used to repeat blocks over and over. "}Repeat blocks
              allow me to do an action multiple times without additional blocks.
              'if' blocks allow me to do an action based on my surroundings.{/msg}
          {case 9}
            {msg meaning="Karel.reinfMsg9" desc="instructions - An example of an
              'if-else' block is if there is a path ahead move forward, else
              turn left."}Here is an 'if-else' block: I move forward if there
              is a path ahead, but I turn left if not.{/msg}
          {case 10}
            {msg meaning="Karel.reinfMsg10" desc="instructions - 'block' refers
              to a child's stackable toys. A 'repeat' block is used to repeat
              blocks over and over. The red marker is the goal to be reached
              in the maze."}Will the blocks below move me to the red marker?{/msg} */
        {/switch}
      </span>
    </div>
    <img id="pegman_bubble" height=42 width=55 src="pegman_bubble.png">


    /**
     * Show image below avatar for these reinf levels.
     */
    {if $ij.level == 4}
      <p><img border=2 src="dirs.png">&nbsp;<img src="dirs2.png"><br>
    {/if}
    {if $ij.level == 5}
      <p><img style="margin-left: 110px;" src="ifblock.png"><br>
    {/if}
    {if $ij.level == 6}
      <img style="margin-top: 10px;" border=2 src="repeat_block2.png"><br>
    {/if}
    {if $ij.level == 9}
      <p><img style="margin-left: 60px; height: 150px; width: 260px;"
          src="if-else2.png"><br><br>
    {/if}
    {if $ij.level == 10}
     <p><img style="margin-left: 10px; height: 350px; width: 490px;"
         src="ifelse.png"><br>
    {/if}


  /**
   * Multiple choice question.
   */
  {if $ij.level == 4}
    <p>
      <input type="radio" name="q4" id="q41"
        onclick="Maze.showReinfHelp('q4w')">
        <span style="font-weight: bold">
          {msg meaning="Karel.dirN" desc="An abbreviation of the direction
            North"} N{/msg}
        </span><br>
      <input type="radio" name="q4" id="q42"
        onclick="Maze.showReinfHelp('q4w')">
        <span style="font-weight: bold">
          {msg meaning="Karel.dirE" desc="An abbreviation of the direction
            East"} E{/msg}
        </span><br>
      <input type="radio" name="q4" id="q43"
        onclick="Maze.showReinfHelp('q4w')">
        <span style="font-weight: bold">
          {msg meaning="Karel.dirS" desc="An abbreviation of the direction
            North"} S{/msg}
        </span><br>
      <input type="radio" name="q4" id="q44"
        onclick="Maze.showReinfHelp('q4r')">
        <span style="font-weight: bold">
          {msg meaning="Karel.dirW" desc="An abbreviation of the direction
            West"} W{/msg}
        </span><br><br>
    </p>
    <div id="shadow"></div>
    <div id="reinfDone">
      <div style="padding-bottom: 0.7ex;">
        <div style="text-align: center;" id="reinfFeedbackImage"></div><br>
        <textarea id="reinfFeedbackText" rows=2 cols=40 style="resize: none;
          border: none; text-align: center; overflow: hidden; font-size: 16pt;
          font-family: Arial;"></textarea>
      </div>
      <div style="text-align: center; padding-top: 1ex; padding-right: 3ex">
        <button id="okButton" class="launch" onclick="Maze.hideReinfHelp()&nbsp">
          <span>
            {msg meaning="Karel.ok" desc="Closes the dialog box."}OK{/msg}
          </span>
        </button>
      </div>
    </div>
  {/if}
  {if $ij.level == 6}
    <p>
      <img style="margin-left: 30px;" src="repeat_blocka1.png"
        onclick="Maze.showReinfHelp('q5w')">
      <img style="margin-left: 20px;" src="repeat_blocka2.png"
        onclick="Maze.showReinfHelp('q5r')">
      <img style="margin-left: 20px;" src="repeat_blocka3.png"
        onclick="Maze.showReinfHelp('q5w')">
    </p>
    <div id="shadow"></div>
    <div id="reinfDone">
      <div style="padding-bottom: 0.7ex">
        <div style="text-align: center;" id="reinfFeedbackImage"></div><br>
        <textarea id="reinfFeedbackText" rows=2 cols=40 style="resize: none;
          border: none; text-align: center; overflow: hidden; font-size: 16pt;
          font-family: Arial;"></textarea>
      </div>
      <div style="text-align: center; padding-top: 1ex; padding-right: 3ex;">
        <button id="okButton" class="launch" onclick="Maze.hideReinfHelp()">
          <span>
            {msg meaning="Karel.ok" desc="Closes the dialog box."}OK{/msg}
          </span>
        </button>
      </div>
    </div>
  {/if}
  {if $ij.level == 10}
    <p>
      <input type="radio" name="q8" id="q81"
        onClick="Maze.showReinfHelp('q10r')">
        <span style="font-weight: bold">{msg meaning="Karel.yes" desc="Yes
          indicates that this option is true and correct."} Yes{/msg}
        </span><br>
      <input type="radio" name="q8" id="q82"
        onClick="Maze.showReinfHelp('q10w')">
        <span style="font-weight: bold">
          {msg meaning="Karel.no" desc="No indicates that this option is
            false and incorrect."} No{/msg}
        </span><br><br>
    </p>
    <div id="shadow"></div>
    <div id="reinfDone">
      <div style="padding-bottom: 0.7ex;">
        <div style="text-align:center;" id="reinfFeedbackImage"></div><br>
        <textarea id="reinfFeedbackText" rows=2 cols=40 style="resize: none;
          border: none; text-align: center; overflow: hidden;
          font-size: 16pt; font-family: Arial;"></textarea>
      </div>
      <div style="text-align: center; padding-top: 1ex; padding-right: 3ex;">
        <button id="okButton" class="launch" onclick="Maze.hideReinfHelp()">
          <span>
            {msg meaning="Karel.ok" desc="Closes the dialog box."}OK{/msg}
          </span>
        </button>
      </div>
    </div>
  {/if}
  </div>
  /**
  * End reinf level processing.
  */
  <br><br>
  <div style="text-align: center">
    <button id="tryLevelAgainButton" class="launch" style="display: none"
      onclick="Maze.closeDialogButtonClick(false);">
      {msg meaning="Karel.tryAgain" desc="button - Closes the dialog and
        stays on the current level"}Try again{/msg}
    </button>
    <button id="nextLevelButton" class="launch" style="display: none"
      onclick="Maze.closeDialogButtonClick(true);">
        {msg meaning="Karel.continue" desc="button - Closes the dialog and
          continues to the next level"}Continue{/msg}
    </button>
  </div>
  </div>
  </div>

  <div id="visualization">
    <div id="hintBubble">
      <div id="hint">
        {if $ij.page == 1}
          {call page1.hints /}
        {else}
          {call page2.hints /}
        {/if}
      </div>
    </div>
    <svg xmlns="http://www.w3.org/2000/svg" version="1.1" id="svgMaze" width="400px" height="450px">
      <g id="look">
        <path d="M 0,-15 a 15 15 0 0 1 15 15" />
        <path d="M 0,-35 a 35 35 0 0 1 35 35" />
        <path d="M 0,-55 a 55 55 0 0 1 55 55" />
      </g>
    </svg>
    <div id="capacityBubble">
      <div id="capacity"></div>
    </div>
  </div>
  <table width="400">
    <tr>
      <td style="width: 190px; text-align: center; vertical-align: top;">
        <button title="{msg meaning="Karel.codeTooltip" desc="tooltip
          (pop-up help) for button; pressing the button causes a program
          in the JavaScript computer language to be displayed, based on the
          program created by the user."}See generated JavaScript code.{/msg}"
          onclick="BlocklyApps.showCode();">
          <img src='../media/1x1.gif' class="code icon21">
        </button>
        <button id="linkButton" title="{msg meaning="Karel.linkTooltip"
          desc="tooltip (pop-up help) for button; pressing the button
          causes the user's program to be saved and for a URL to be
          provided for retrieving it.  The word 'blocks' is as in
          children's toy blocks."}Save and link to blocks.{/msg}"
          onclick="BlocklyStorage.link();">
          <img src='../media/1x1.gif' class="link icon21">
        </button>
      </td>
      <td>
        <button id="runButton" class="launch" onclick="Maze.runButtonClick();">
            <img src="../media/1x1.gif" class="run icon21"> {msg meaning="Karel.runProgram"
            desc="button label - Pressing the button runs the computer program the user has
            written."} Run Program{/msg}
          </button>
        </button>
        <button id="resetButton" class="launch"
          onclick="Maze.resetButtonClick();" style="display: none">
            <img src="../media/1x1.gif" class="stop icon21">
              {msg meaning="Karel.resetProgram" desc="button label -
                Pressing the button causes Pegman return to the start of the maze
                (but does not delete the user's program.)"} Reset{/msg}
          </button>
      </td>
    </tr>
  </table>

  <script type="text/javascript" src="../blockly_compressed.js"></script>
  <script type="text/javascript" src="../javascript_compressed.js"></script>
  <script type="text/javascript" src="../{$ij.langSrc}"></script>
  <script type="text/javascript" src="blocks.js"></script>
  {call .toolbox /}
  <div id="blockly"></div>

  <div id="pegmanMenu"></div>
  <div id="shadow"></div>
{/template}

/**
 * Toolboxes for each level.
 */
{template .toolbox}
  <xml id="toolbox" style="display: none;">
    {if $ij.page == 1}
      {call page1.toolbox /}
    {else}
      {call page2.toolbox /}
    {/if}
  </xml>
{/template}
/**
 * Web page structure.
 */
{template .startBlocks}
  {if $ij.page == 1}
    {switch $ij.level}
      {case 1}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 2}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 3}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 4}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 5}
        <block type="maze_untilBlocked" x="70" y="70"></block>
      {case 6}
        <block type="maze_pickUpBall" x="70" y="70"></block>
      {case 7}
        <block type="maze_turn" x="70" y="70">
              <title name="DIR">turnRight</title>
        </block>
      {case 8}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 9}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 10}
        <block type="maze_untilBlocked" x="70" y="70"></block>
      {case 11}
        <block type="maze_untilBlocked" x="70" y="70"></block>
    {/switch}
  {else}
    {switch $ij.level}
      {case 2}
        {call .fillShovelfuls}
          {param shovelfuls: 5 /}
        {/call}
      {case 3}
        {call .fillShovelfuls}
          {param shovelfuls: 5 /}
        {/call}
      {case 4}
        {call .fillShovelfuls}
          {param shovelfuls: 5 /}
        {/call}
        <block type="procedures_defnoreturn" x="300" y="200" editable=false
          deletable=false>
          <mutation></mutation>
          <title name="NAME">remove 7</title>
        </block>
      {case 5}
        <block type="procedures_defnoreturn" x="20" y="200" editable=false
          deletable=false>
          <mutation></mutation>
          <title name="NAME">remove 3</title>
        </block>
      {case 6}
        {call .fillShovelfuls}
          {param shovelfuls: 8 /}
        {/call}
        {call .removeShovelfuls}
          {param shovelfuls: 8 /}
        {/call}
      {case 7}
        <block type="procedures_callnoreturn" x="20" y="70" editable=false
          deletable=false>
          <mutation name="avoid the cow and remove 1"></mutation>
        </block>
        <block type="procedures_defnoreturn" x="20" y="200" editable=false
          deletable=false>
          <mutation></mutation>
          <title name="NAME">avoid the cow and remove 1</title>
        </block>
      {case 8}
        <block type="procedures_defnoreturn" x="20" y="200" editable=false
          deletable=false>
          <mutation></mutation>
          <title name="NAME">avoid the cow and remove 1</title>
          <statement name="STACK">
            <block type="maze_turn" editable=false deletable=false
              movable=false>
              <title name="DIR">turnLeft</title>
              <next>
                <block type="maze_moveForward" editable=false deletable=false
                  movable=false>
                  <next>
                    <block type="maze_turn" editable=false deletable=false
                      movable=false>
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_moveForward" editable=false
                          deletable=false movable=false>
                          <next>
                            <block type="maze_moveForward" editable=false
                              deletable=false movable=false>
                              <next>
                                <block type="maze_turn" editable=false
                                  deletable=false movable=false>
                                  <title name="DIR">turnRight</title>
                                  <next>
                                    <block type="maze_moveForward"
                                      editable=false deletable=false
                                      movable=false>
                                      <next>
                                        <block type="maze_pickUpBall"
                                          editable=false deletable=false
                                          movable=false>
                                          <next>
                                            <block type="maze_turn"
                                              editable=false deletable=false
                                              movable=false>
                                              <title name="DIR">turnLeft
                                              </title>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {case 9}
        <block type="maze_if" x="20" y="70">
          <title name="DIR">ballsPresent</title>
        </block>
        <block type="procedures_defnoreturn" x="20" y="200" editable=false
          deletable=false>
          <mutation></mutation>
          <title name="NAME">remove piles</title>
          <statement name="STACK">
            <block type="maze_turn" editable=false deletable=false
              movable=false>
              <title name="DIR">turnLeft</title>
              <next>
                <block type="controls_repeat" editable=false deletable=false
                  movable=false>
                  <title name="TIMES">4</title>
                  <statement name="DO">
                    <block type="maze_pickUpBall" editable=false
                      deletable=false movable=false>
                      <next>
                        <block type="maze_moveForward" editable=false
                          deletable=false movable=false></block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn" editable=false deletable=false
                      movable=false>
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn" editable=false deletable=false
                          movable=false>
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_repeat" editable=false
                              deletable=false movable=false>
                              <title name="TIMES">4</title>
                              <statement name="DO">
                                <block type="maze_moveForward" editable=false
                                  deletable=false movable=false></block>
                              </statement>
                              <next>
                                <block type="maze_turn" editable=false
                                  deletable=false movable=false>
                                  <title name="DIR">turnLeft</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
        <block type="procedures_defnoreturn" x="300" y="200" editable=false
          deletable=false>
          <mutation></mutation>
          <title name="NAME">fill holes</title>
          <statement name="STACK">
            <block type="maze_turn" editable=false deletable=false
              movable=false>
              <title name="DIR">turnLeft</title>
              <next>
                <block type="controls_repeat" editable=false deletable=false
                  movable=false>
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="maze_putDownBall" editable=false
                      deletable=false movable=false>
                      <next>
                        <block type="maze_moveForward" editable=false
                          deletable=false movable=false></block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn" editable=false deletable=false
                      movable=false>
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn" editable=false deletable=false
                          movable=false>
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_repeat" editable=false
                              deletable=false movable=false>
                              <title name="TIMES">2</title>
                              <statement name="DO">
                                <block type="maze_moveForward" editable=false
                                  deletable=false movable=false></block>
                              </statement>
                              <next>
                                <block type="maze_turn" editable=false
                                  deletable=false movable=false>
                                  <title name="DIR">turnLeft</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {case 10}
        <block type="procedures_defnoreturn" x="20" y="200" editable=false
          deletable=false>
          <mutation></mutation>
          <title name="NAME">remove piles</title>
          <statement name="STACK">
            <block type="maze_turn" editable=false deletable=false
              movable=false>
              <title name="DIR">turnLeft</title>
              <next>
                <block type="controls_repeat" editable=false deletable=false
                  movable=false>
                  <title name="TIMES">4</title>
                  <statement name="DO">
                    <block type="maze_pickUpBall" editable=false
                      deletable=false movable=false>
                      <next>
                        <block type="maze_moveForward" editable=false
                          deletable=false movable=false></block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn" editable=false deletable=false
                      movable=false>
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn" editable=false deletable=false
                          movable=false>
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_repeat" editable=false
                              deletable=false movable=false>
                              <title name="TIMES">4</title>
                              <statement name="DO">
                                <block type="maze_moveForward" editable=false
                                  deletable=false movable=false></block>
                              </statement>
                              <next>
                                <block type="maze_turn" editable=false
                                  deletable=false movable=false>
                                  <title name="DIR">turnLeft</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
        <block type="procedures_defnoreturn" x="300" y="200" editable=false
          deletable=false>
          <mutation></mutation>
          <title name="NAME">fill holes</title>
          <statement name="STACK">
            <block type="maze_turn" editable=false deletable=false
              movable=false>
              <title name="DIR">turnLeft</title>
              <next>
                <block type="controls_repeat" editable=false deletable=false
                  movable=false>
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="maze_putDownBall" editable=false
                      deletable=false movable=false>
                      <next>
                        <block type="maze_moveForward" editable=false
                          deletable=false movable=false></block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn" editable=false deletable=false
                      movable=false>
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn" editable=false deletable=false
                          movable=false>
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_repeat" editable=false
                              deletable=false movable=false>
                              <title name="TIMES">2</title>
                              <statement name="DO">
                                <block type="maze_moveForward" editable=false
                                  deletable=false movable=false></block>
                              </statement>
                              <next>
                                <block type="maze_turn" editable=false
                                  deletable=false movable=false>
                                  <title name="DIR">turnLeft</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {case 11}
        <block type="procedures_defnoreturn" x="20" y="200" editable=false
          deletable=false>
          <mutation></mutation>
          <title name="NAME">remove 1 and avoid the cow</title>
          <statement name="STACK">
            <block type="maze_pickUpBall" editable=false deletable=false
              movable=false>
              <next>
                <block type="maze_turn" editable=false deletable=false
                  movable=false>
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="maze_moveForward" editable=false
                      deletable=false movable=false>
                      <next>
                        <block type="maze_turn" editable=false deletable=false
                          movable=false>
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="maze_moveForward" editable=false
                              deletable=false movable=false>
                              <next>
                                <block type="maze_moveForward" editable=false
                                  deletable=false movable=false>
                                  <next>
                                    <block type="maze_turn" editable=false
                                      deletable=false movable=false>
                                      <title name="DIR">turnRight</title>
                                      <next>
                                        <block type="maze_moveForward"
                                          editable=false deletable=false
                                          movable=false>
                                          <next>
                                            <block type="maze_turn"
                                              editable=false deletable=false
                                              movable=false>
                                              <title name="DIR">turnLeft
                                              </title>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
    {/switch}
  {/if}
{/template}
/**
 * Template to create function for filling in shovels.
 * @param shovelfuls
 */
{template .fillShovelfuls}
  <block type="procedures_defnoreturn" x="20" y="200" editable=false
    deletable=false>
    <mutation></mutation>
    <title name="NAME">fill {$shovelfuls}</title>
    <statement name="STACK">
      <block type="controls_repeat" editable=false deletable=false
        movable=false>
        <title name="TIMES">{$shovelfuls}</title>
        <statement name="DO">
          <block type="maze_putDownBall" editable=false deletable=false
            movable=false>
          </block>
        </statement>
       </block>
    </statement>
  </block>
{/template}

/**
 * Template to create function for removing in shovels.
 * @param shovelfuls
 */
{template .removeShovelfuls}
  <block type="procedures_defnoreturn" x="300" y="200" editable=false
    deletable=false>
    <mutation></mutation>
    <title name="NAME">remove {$shovelfuls}</title>
    <statement name="STACK">
      <block type="controls_repeat" editable=false deletable=false
        movable=false>
        <title name="TIMES">{$shovelfuls}</title>
        <statement name="DO">
          <block type="maze_pickUpBall" editable=false deletable=false
            movable=false>
          </block>
        </statement>
       </block>
    </statement>
  </block>
{/template}
/**
 * @param? doStatement An optional statement for the do statement in the loop.
 * @param? upperLimit The upper limit of the for loop.
 */
{template .controlsFor autoescape="false"}
  <block type="controls_for">
    <value name="FROM">
      <block type="math_number">
        <title name="NUM">1</title>
      </block>
    </value>
    <value name="TO">
      <block type="math_number">
        <title name="NUM">
          {$upperLimit ? $upperLimit : 10}
        </title>
      </block>
    </value>
    <value name="BY">
      <block type="math_number">
        <title name="NUM">1</title>
      </block>
    </value>
    {if $doStatement}
      <statement name="DO">
         {$doStatement}
      </statement>
    {/if}
  </block>
{/template}
