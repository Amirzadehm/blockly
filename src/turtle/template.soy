{namespace turtlepage}

/**
 * This is a Closure Template.
 *
 * To build the US English version, run:
 * java -jar ../_soy/SoyToJsSrcCompiler.jar --outputPathFormat generated/en_us.js --srcs ../common.soy,template.soy
 *
 * To fully internationalize, follow the instructions in ../common.soy.
 */


// Templates for interstitials.

/**
 * Display text before starting a level.
 * @param text The text to display.
 * @param class "pre" or "post"
 */
{template .interText}
  <span class="{$class}Inter">
    <div id="reinfbubble">
      <span id="reinfMsg">{$text}</span>
    </div>
    <img id="turtle" height=45 width=130 src="{$ij.baseUrl}turtle/turtle.png">
  </span>
{/template}

/**
 * Display text and a picture.
 * @param text The text to display.
 * @param image The image to display.
 */
{template .prePicture}
  <span class="preInter">
    <div id="reinfbubble">
      <span id="reinfMsg">{$text}</span>
    </div>
    <img id="turtle" height=45 width=130 src="{$ij.baseUrl}turtle/turtle.png">
    <table>
      <tr><br></tr>
      <tr><td><img src="{$ij.baseUrl}turtle/{$image}"></td></tr>
      <tr height=40><br><br></tr>
    </table>
  </span>
{/template}

/**
 * Display text and animation.
 * @param text The text to display.
 * @param image The animated gif to display.
 */
{template .preAnimation}
  <span class="preInter">
    <div id="reinfbubble">
      <span id="reinfMsg">{$text}</span>
    </div>
    <img id="turtle" height=45 width=130 src="{$ij.baseUrl}turtle/turtle.png">
    <p><button id="showButton" style="display: inline" class="launch" onclick="this.style.display = 'none'; document.getElementById('animation').style.display='inline'; document.getElementById('continueButton').style.display='inline';">{msg meaning="Turtle.showMe" desc="TODO"}Show me{/msg}</button></p>
    <div id="animation" style="display: none">
      <table>
        <tr>
          <td><img src="{$ij.baseUrl}turtle/{$image}"></td>
        </tr>
      </table>
    </div>
  </span>
{/template}

/**
 * Common code for creating procedures drawing different regular polygons.
 * @param title Title of procedure.
 * @param modifiers String containing any optional keys and values for the initial
 *        <block> tag, such as 'x="20" y="20" editable="false"'.
 * @param sides Number of sides.
 * @param length 0 if a length parameter should be used, a positive number otherwise
 */
{template .polygon autoescape="false"}
  <block type="procedures_defnoreturn" {$modifiers}>
    <mutation>
      {if $length == 0}
        <arg name="length"></arg>
      {/if}
    </mutation>
    <title name="NAME">{$title}</title>
    <statement name="STACK">
      <block type="controls_repeat" {$modifiers}>
        <title name="TIMES">{$sides}</title>
        <statement name="DO">
          <block type="draw_move" {$modifiers}>
            <value name="VALUE">
              {if $length == 0}
                <block type="variables_get_length" {$modifiers}></block>
              {else}
                <block type="math_number" {$modifiers}>
                  <title name="NUM">{$length}</title>
                </block>
              {/if}
            </value>
            <next>
              <block type="draw_turn" {$modifiers}>
                <value name="VALUE">
                  <block type="math_number" {$modifiers}>
                    <title name="NUM">{360 / $sides}</title>
                  </block>
                </value>
              </block>
            </next>
          </block>
        </statement>
      </block>
    </statement>
  </block>
{/template}

/**
 * Show interstitial messages.  These will be replaced by modal dialogs.
 */
{template .showInterstitials}
  <div id="interstitial" style="display: none;">
    <div style="margin-left: 50px;">
      {if $ij.page == 1}
        {switch $ij.level}
          {case 2}  // Before coloured square.
            {call .prePicture}
              {param text}{msg meaning="Turtle.inter1_2_pre" desc="interstitial"}I can draw in different colors.  Choose what color you would like me to use with the "set color" block.  Blocks for changing color don't count to your block count used for scoring, so go wild!{/msg}{/param}
              {param image}set-colour.png{/param}
          {/call}
        {case 3}  // Before repeat.
          {call .preAnimation}
              {param text}{msg meaning="Turtle.inter1_3_pre" desc="interstitial"}Tired of dragging and dropping?  Let the "repeat" block do the work for you.{/msg}{/param}
              {param image}repeat-intro.gif{/param}
          {/call}
        {case 4}  // Before triangle.
          {call .prePicture}
              {param text}{msg meaning="Turtle.inter1_4_pre" desc="interstitial"}Do you like surprises?  Use the "random color" block to let me pick the color.{/msg}{/param}
              {param image}random-colour.png{/param}
          {/call}
        {case 5}  // Before overlapping square and triangle.
          {call .interText}
            {param text}{msg meaning="Turtle.inter1_5_pre" desc="interstitial"}Did you know you can copy and paste a block?{/msg}{/param}
            {param class}pre{/param}
          {/call}
        {case 6}  // Before envelope (turned square and triangle).
          {call .interText}
            {param text}{msg meaning="Turtle.inter1_6_pre" desc="interstitial"}I can move backward, not just forward.{/msg}{/param}
            {param class}pre{/param}
          {/call}
        {case 8}  // Before spikes.
          {call .prePicture}
            {param text}{msg meaning="Turtle.inter1_8_pre" desc="interstitial"}Do you ever get tired of waiting for me?  You can make me move faster (or slower) with the speed slider.{/msg}{/param}
            {param image}slider.gif{/param}
          {/call}
        {case 10}  // Before playground (10).
          {call .prePicture}
            {param text}{msg meaning="Turtle.inter1_10_pre" desc="interstitial"}Congratulations on completing this tutorial.  Just for fun, here's a new block that changes how wide of lines I draw.  We've been using a default width of 5.{/msg}{/param}
            {param image}set-width.png{/param}
          {/call}
        {/switch}
      {elseif $ij.page == 2}
        {switch $ij.level}
          {case 1}  // Before drawing a square.
            {call .interText}
              {param text}{msg meaning="Turtle.inter2_1_pre" desc="interstitial"}To make room for new blocks, we've put the blocks into categories.  You may have to look around for your old favorite blocks, but they're all there.{/msg}{/param}
            {param class}pre{/param}
            {/call}
          {case 2}  // Before use of "draw a square".
            {call .interText}
              {param text}{msg meaning="Turtle.inter2_2_pre" desc="interstitial"}We've added a new category for "Functions", a powerful new type of block.{/msg}{/param}
              {param class}pre{/param}
            {/call}
          {case 3}  // Before drawing of 3 squares
            {call .interText}
              {param text}{msg meaning="Turtle.inter2_3_pre" desc="interstitial"}Wondering why it's better to use "repeat" than copying and pasting the blocks three times?  See why on the next level{/msg}{/param}
              {param class}pre{/param}
            {/call}
          {case 4}  // Before drawing of 36 squares.
            {call .prePicture}
              {param text}{msg meaning="Turtle.inter2_4_pre" desc="interstitial"}Here's how I solved the previous level.  Make sure you understand it before proceeding.{/msg}{/param}
              {param image}three-squares.png{/param}
            {/call}
          {case 5}  // Before manually making nested squares.
            {call .interText}
              {param text}{msg meaning="Turtle.inter2_5_pre" desc="interstitial"}Let's explore what we can do with squares of different sizes...{/msg}{/param}
              {param class}pre{/param}
            {/call}
          {case 6}  // Before using "count with" block.
            {call .prePicture}
              {param text}{msg meaning="Turtle.inter2_6_pre" desc="interstitial"}Wouldn't it be nice if you could tell me to count by tens from 50 to 100, drawing a square each time?  Well you can -- with the new "count with" block.  The programs on the left and right do the same thing.{/msg}{/param}
              {param image}count-loop-square.png{/param}
            {/call}
          {case 7}  // Before boxy spiral.
            {call .prePicture}
              {param text}{msg meaning="Turtle.inter2_7_pre" desc="interstitial"}This code draws a boxy spiral.  You'll need to figure out what should go in the blanks on the "count with" block to do it with fewer blocks on the next level.{/msg}{/param}
              {param image}spiral-quiz.png{/param}
            {/call}
          {case 8}  // Before same-height snowmen.
            {call .interText}
              {param text}{msg meaning="Turtle.inter2_8_pre" desc="interstitial"}We've given you two new blocks: "jump forward", which moves the turtle without leaving a trail, and "draw a snowman", which draws an elephant -- just kidding.{/msg}{/param}
              {param class}pre{/param}
            {/call}
          {case 9}  // Before family of snowmen.
            {call .interText}
              {param text}{msg meaning="Turtle.inter2_9_pre" desc="interstitial"}You don't need to always count from a low number to a high number.  You can count from high to low too.{/msg}{/param}
              {param class}pre{/param}
            {/call}
        {/switch}
      {elseif $ij.page == 3}
        {switch $ij.level}
          {case 1}  // Before calling "draw a square".
            {call .interText}
              {param text}{msg meaning="Turtle.inter3_1_pre" desc="interstitial"}You'll now learn how to create new blocks, which are called "functions".{/msg}{/param}
              {param class}pre{/param}
            {/call}
          {case 2}  // Before and after creating "draw a triangle".
            {call .preAnimation}
              {param text}{msg meaning="Turtle.inter3_2_pre" desc="interstitial"}Here's how the "draw a square" block was created.  On this level, you'll create your own "draw a triangle" block.{/msg}{/param}
              {param image}define-draw-a-square.gif{/param}
            {/call}
            {call .interText}
              {param text}{msg meaning="Turtle.inter3_2_post" desc="interstitial"}Congratulations on adding a new block!  That's a huge step for a programmer.  Dividing big tasks into bite-sized pieces is what makes large programs possible.{/msg}{/param}
              {param class}post{/param}
            {/call}
          {case 5}  // Before creating "draw a house" funciton.
            {call .interText}
              {param text}{msg meaning="Turtle.inter3_5_pre" desc="interstitial"}The new blocks that you define can be used just like the built-in blocks, including being used within another block definition...{/msg}{/param}
              {param class}pre{/param}
            {/call}
          {case 6}  // Before adding length parameter to "draw a triangle".
            {call .preAnimation}
              {param text}{msg meaning="Turtle.inter3_6_pre" desc="interstitial"}Let me show you how the input was added to "draw a square".  You'll need to know this for this level, where you'll add an input to "draw a triangle".{/msg}{/param}
              {param image}draw-a-square-add-input.gif{/param}
            {/call}
          {case 8}  // Before modifying end location of "create a house".
            {call .interText}
              {param text}{msg meaning="Turtle.inter3_8_pre" desc="interstitial"}It can be useful for a function to put the turtle at a good ending position, to help with building up bigger pictures.{/msg}{/param}
              {param class}pre{/param}
            {/call}
          {case 9}  // After final level.
            {call .interText}
              {param text}{msg meaning="Turtle.inter3_9_post" desc="interstitial"}You now know how to control the turtle, use loops ("repeat" and "count from"), and write and use functions.  Congratulations on becoming a programmer!{/msg}{/param}
              {param class}post{/param}
            {/call}
        {/switch}
      {/if}
    </div>  // style="margin-left: 50px;"
  </div> // interstitial
{/template}

/**
 * Define the starting blocks for each page and level.
 * These are referenced from turtle.js.
 */
{template .startBlocks}
  // Show the starting blocks for the given page and level.
  <div id="start_blocks" style="display: none">
    {if $ij.page == 1}
      {switch $ij.level}
        {case 1, 2}
          <block type="draw_move_by_constant" x="20" y="20"></block>
        {case 3, 4, 5, 6}
          <block type="controls_repeat" x="20" y="20">
            <title name="TIMES">{if $ij.level == 3}4{else}3{/if}</title>
          </block>
        {case 7}
          <block type="draw_turn_by_constant_restricted" x="20" y="20">
            <title name="DIR">turnRight</title>
            <title name="VALUE">90</title>
          </block>
        {case 8}
          <block type="draw_colour" x="20" y="100">
            <value name="COLOUR">
              <block type="colour_random"></block>
            </value>
            <next>
              <block type="draw_move_by_constant">
                <title name="DIR">moveForward</title>
                <title name="VALUE">100</title>
                <next>
                  <block type="draw_move_by_constant">
                    <title name="DIR">moveBackward</title>
                    <title name="VALUE">100</title>
                    <next>
                      <block type="draw_turn_by_constant">
                        <title name="DIR">turnRight</title>
                        <title name="VALUE">45</title>
                      </block>
                    </next>
                  </block>
                </next>
              </block>
            </next>
          </block>
        {case 9}
          <block type="controls_repeat" deletable="false" movable="false" x="20" y="20">
            <title name="TIMES">??</title>
            <statement name="DO">
              <block type="draw_move" editable="false" deletable="false" movable="false">
                <value name="VALUE">
                  <block type="math_number" editable="false" deletable="false" movable="false">
                    <title name="NUM">1</title>
                  </block>
                </value>
                <next>
                  <block type="draw_turn" editable="false" deletable="false" movable="false">
                    <value name="VALUE">
                      <block type="math_number" editable="false" deletable="false" movable="false">
                        <title name="NUM">1</title>
                      </block>
                    </value>
                  </block>
                </next>
              </block>
            </statement>
          </block>
        {case 10}
          <block type="draw_move_by_constant" x="20" y="20">
            <title name="DIR">moveForward</title>
            <title name="VALUE">100</title>
          </block>
      {/switch}
    {elseif $ij.page == 2}
      // No blocks are provided for levels 1 and 2.
      {if $ij.level == 3 or $ij.level == 5}
        /*  Call "draw a square".  */
        <block type="draw_a_square" inline="true">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">{if $ij.level == 3}100{else}50{/if}</title>
            </block>
          </value>
        </block>
      {elseif $ij.level == 4}
        /*  Three-square code.  */
        <block type="controls_repeat" deletable="false" movable="false">
          <title name="TIMES">???</title>
          <statement name="DO">
            <block type="draw_colour">
              <value name="COLOUR">
                <block type="colour_random"></block>
              </value>
              <next>
                <block type="draw_a_square" inline="true" editable="false" deletable="false" movable="false">
                  <value name="VALUE">
                    <block type="math_number" deletable="false" movable="false">
                      <title name="NUM">???</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_turn" editable="false" deletable="false" movable="false">
                      <value name="VALUE">
                        <block type="math_number" deletable="false" movable="false">
                          <title name="NUM">???</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {elseif $ij.level == 6}
        <block type="controls_for_counter" inline="true" x="20" y="20">
          <title name="VAR">{msg meaning="Turtle.loopVariable" desc="IBID"}counter{/msg}</title>
          <value name="FROM">
            <block type="math_number">
              <title name="NUM">{if $ij.level == 6}50{else}10{/if}</title>
            </block>
          </value>
          <value name="TO">
            <block type="math_number">
              <title name="NUM">{if $ij.level == 6}90{else}100{/if}</title>
            </block>
          </value>
          <value name="BY">
            <block type="math_number">
              <title name="NUM">10</title>
            </block>
          </value>
          <statement name="DO">
            <block type="draw_a_square" inline="true">
            </block>
          </statement>
        </block>
      {elseif $ij.level == 7}
        {for $i in range(25, 61, 5)}
          <block type="draw_move" {if $i == 25}x="300" y="100"{/if} inline="false" editable="false" disabled="true">
            <title name="DIR">moveForward</title>
              <value name="VALUE">
                <block type="math_number" disabled="true">
                  <title name="NUM">{$i}</title>
                </block>
              </value>
              <next>
                <block type="draw_turn" inline="false" editable="false" disabled="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number" disabled="true">
                      <title name="NUM">90</title>
                    </block>
                  </value>
                  <next>
        {/for}
        {for $i in range(5, 25, 5)}
                </block>
              </next>
            </block>
          </next>
        {/for}
      {elseif $ij.level == 8 or $ij.level == 9}
        <block type="draw_a_snowman" x="20" y="20">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">150</title>
            </block>
          </value>
        </block>
      {elseif $ij.level == 10}
        <block type="draw_width" inline="false" x="158" y="67">
          <value name="WIDTH">
            <block type="math_number">
              <title name="NUM">1</title>
            </block>
          </value>
          <next>
            <block type="controls_for_counter" inline="true">
              <title name="VAR">length</title>
              <value name="FROM">
                <block type="math_number">
                  <title name="NUM">1</title>
                </block>
              </value>
              <value name="TO">
                <block type="math_number">
                  <title name="NUM">100</title>
                </block>
              </value>
              <value name="BY">
                <block type="math_number">
                  <title name="NUM">1</title>
                </block>
              </value>
              <statement name="DO">
                <block type="draw_move" inline="false">
                  <title name="DIR">moveForward</title>
                  <value name="VALUE">
                    <block type="variables_get_length"></block>
                  </value>
                  <next>
                    <block type="draw_turn" inline="false">
                      <title name="DIR">turnRight</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">91</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </next>
        </block>
      {/if}
    {else}  // page == 3
      /*  Define "draw a square".  */
      {call .polygon}
        {param title}draw a square{/param}
        {param modifiers}x="20" y="20" editable="false" deletable="false" movable="false"{/param}
        {param sides: 4 /}
        {param length}{if $ij.level >= 6}0{else}100{/if}{/param}
      {/call}
      {if $ij.level == 1}
        /*  Define "draw a circle".  */
        {call .polygon}
          {param title}draw a circle{/param}
          {param modifiers}x="340" y="20" editable="false" deletable="false" movable="false"{/param}
          {param sides: 360 /}
          {param length}1{/param}
        {/call}
      {/if}
      {if $ij.level == 2}
        <block type="procedures_defnoreturn" x="20" y="175">
          <title name="NAME">draw a triangle</title>
        </block>
      {elseif $ij.level >= 3}
        /*  Define "draw a triangle".  */
        {call .polygon}
          {param title}draw a triangle{/param}
          {param modifiers}{if $ij.level == 6}x="20" y="190"{else}x="360" y="20" editable="false" deletable="false"{/if}{/param}
          {param sides: 3 /}
          {param length}{if $ij.level >= 7}0{else}100{/if}{/param}
        {/call}
      {/if}
      {if $ij.level == 7}
        /*  Define "draw a house".  */
        <block type="procedures_defnoreturn" x="20" y="200">
          <mutation>
            {if $ij.level == 11}<arg name="length"></arg>{/if}
          </mutation>
          <title name="NAME">draw a house</title>
          <statement name="STACK">
            <block type="procedures_callnoreturn" inline="false">
              <mutation name="draw a square">
                <arg name="length">
              </mutation>
              <value name="ARG0">
                <block type="math_number">
                  <title name="NUM">100</title>
                </block>
              </value>
              <next>
                <block type="draw_move" inline="true">
                  <title name="DIR">moveForward</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">100</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_turn" inline="true">
                      <title name="DIR">turnRight</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">30</title>
                        </block>
                      </value>
                      <next>
                        <block type="procedures_callnoreturn" inline="false">
                          <mutation name="draw a triangle">
                            <arg name="length"></arg>
                          </mutation>
                          <value name="ARG0">
                            <block type="math_number">
                              <title name="NUM">100</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {/if}  // End of region in which "draw a square" is defined.
    {/if}
  </div>  // End of "start_blocks".
{/template}

/**
 * Web page structure.
 */
{template .start}
  {call .startBlocks /}

  // First column has prompt, capacity, canvas, slider, and buttons.
  <div id="bubble">
    <div id="prompt"></div>
  </div>
  <div id="blockCount"></div>
  <div id="visualization">
    <canvas id="scratch" width="400" height="400" style="display: none"></canvas>
    <canvas id="answer" width="400" height="400" style="display: none"></canvas>
    <canvas id="images" width="400" height="400" style="display: none"></canvas>
    <canvas id="display" width="400" height="400"></canvas>
  </div>
  <table style="padding-top: 1em;" width=400>
    <tr>
      <td style="width: 190px; text-align: center">
        <svg id="slider"
             xmlns="http://www.w3.org/2000/svg"
             xmlns:svg="http://www.w3.org/2000/svg"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             version="1.1"
             width="150"
             height="50">
            <!-- Slow icon. -->
            <clipPath id="slowClipPath">
              <rect width=26 height=12 x=5 y=14 />
            </clipPath>
            <image xlink:href="{$ij.baseUrl}turtle/icons.png" height=42 width=84 x=-21 y=-10
                clip-path="url(#slowClipPath)" />
            <!-- Fast icon. -->
            <clipPath id="fastClipPath">
              <rect width=26 height=16 x=120 y=10 />
            </clipPath>
            <image xlink:href="{$ij.baseUrl}turtle/icons.png" height=42 width=84 x=120 y=-11
                clip-path="url(#fastClipPath)" />
        </svg>
      </td>
      <td style="width: 15px;">
        <img id="spinner" style="visibility: hidden;" src="{$ij.baseUrl}turtle/loading.gif" height=15 width=15>
      </td>
    </tr>
  </table>

  {call apps.gameButtons}
    {param appInstance}Turtle{/param}
  {/call}

  <div id="toolbarDiv">
    <button title="{msg meaning="Turtle.codeTooltip" desc="TODO"}See generated JavaScript code.{/msg}" onclick="BlocklyApps.showCode(this);">
      <img src='{$ij.baseUrl}media/1x1.gif' class="code icon21">
    </button>
    <button id="linkButton" title="{msg meaning="Turtle.codeTooltip" desc="TODO"}See generated JavaScript code.{/msg}" onclick="BlocklyStorage.link();">
      <img src='{$ij.baseUrl}media/1x1.gif' class="link icon21">
    </button>
  </div>
  {call .toolbox /}
  <div id="blockly"></div>
  {call .feedback /}
{/template}

/**
 * Show feedback.
 */
{template .feedback}
  {call apps.dialog /}
  {call apps.codeDialog /}
  {call apps.storageDialog /}
  <div id="help" class="dialogHiddenContent">
    <div style="padding-bottom: 0.7ex;"><br>
      <img class="stars feedback" id="star1" src="{$ij.baseUrl}star1.png">
      <img class="stars feedback" id="star2" src="{$ij.baseUrl}star2.png">
      <img class="stars feedback" id="star3" src="{$ij.baseUrl}star3.png">
      <ul id="levelFeedbackText">
        <span id="hintTitle" class="feedback" style="display: none; margin-left: -30px">{msg meaning="Apps.hintTitle" desc="IBID"}Hints:{/msg}</span>
        <li id="nextLevelMsg" style="display: none; margin-left: -40px;">{msg
          meaning="Apps.nextLevel" desc="IBID"}Congratulations! You have completed this level.{/msg}</li>
        <li id="finalLevelMsg" style="display: none; margin-left: -40px;">{msg
          meaning="Apps.finalLevelMsg" desc="alert - This is displayed when
          the user solves the most difficult level."}Congratulations! You
          have solved the final level.{/msg}</li>
        <li id="emptyBlocksError" class="feedback" style="display: none">
          {msg meaning="Apps.emptyBlocksErrorMsg" desc="IBID"}Remove empty blocks.{/msg}</li>
        <li id="missingBlocksError" class="feedback" style="display: none">
          {msg meaning="Apps.missingBlocksErrorMsg" desc="IBID"}Try one or more of the blocks below to solve this level.{/msg}</li>
        <li id="tooManyBlocksError" class="feedback" style="display: none">
          {msg meaning="Apps.tooManyBlocksMsg" desc="IBID"}This level can be solved with <span id="idealNumberMessage"></span> blocks.{/msg}</li>
        <li id="tooFewBlocksError" class="feedback" style="display: none">
          {msg meaning="Apps.tooFewBlocksMsg" desc="IBID"}You are using all of the necessary types of blocks, but try using more  of these types of blocks to complete this level.{/msg}</li>
        <li id="levelIncompleteError" class="feedback" style="display: none">
          {msg meaning="Apps.levelIncompleteError" desc="IBID"}You are using all of the necessary types of blocks but not in the right way.{/msg}</li>
        <li id="appSpecificOneStarFeedback" class="feedback" style="display: none"></li>
        <li id="appSpecificTwoStarFeedback" class="feedback" style="display: none">
          {msg meaning="Apps.tooMuchWorkError" desc="TODO"}You made me do a lot of work!  Could you try repeating fewer times?{/msg}
        </li>
      </ul>  // feedbackText
      <iframe id="feedbackBlocks" class="feedback" style="margin-left: 50px;
        height: 80px; width: 500px; border: none; display: none;" src=""></iframe>
      {call .showInterstitials /}

    </div>
    <div id="returnToLevelButton" style="display: none;">{call apps.ok /}</div>
    <div style="text-align: center">
      <button id="tryAgainButton" class="launch" style="display: none"
        onclick="BlocklyApps.goToNextLevelOrReset(false);">
        {msg meaning="Turtle.tryAgain" desc="button - Closes the dialog and
          stays on the current level"}Try again{/msg}
      </button>
      <button id="continueButton" class="launch" style="display: none"
        onclick="BlocklyApps.goToNextLevelOrReset(true);">
          {msg meaning="Turtle.continue" desc="button - Closes the dialog and
            continues to the next level"}Continue{/msg}
      </button>
    </div>
  </div>
{/template}

/**
 * TOOLBOX.
 *
 * PAGE 1
 * ======
 * Within this page, blocks are only added, never taken away.
 *
 * Level 1 [el]: Adds draw_move_by_constant and draw_turn_by_constant.
 * Level 2 [coloured square]: Adds draw_colour with colour_picker.
 * level 3 [square in three blocks]: Adds controls_repeat.
 * level 4 [triangle] Adds draw_colour with colour_random.
 * Level 5 [overlapping square and triangle (sideways envelope)]
 * Level 6 [envelope]
 * Level 7 [glasses]
 * Level 8 [spikes]
 * Level 9 [circle]
 * Level 10 [free play]: draw_width
 *
 * PAGE 2
 * ======
 * Categories are introduced, with contents of:
 * - Actions
 *   - draw_move with math_number
 *   - draw_turn with math_number
 * - Color
 *   - draw_colour (set colour) with colour_picker
 *   - draw_colour (set colour) with colour_random
 * - Functions (added at level 2)
 *   - [call] draw a square
 *   - [call] draw a snowball (added at level 9)
 * - Loops
 *   - controls_repeat
 *   - controls_for (added at level 6)
 * - Math
 *   - math_number
 * - Variables (added at level 6)
 *   - get counter (added at level 9)
 *   - get height (added at level 7)
 *   - get length (levels 6 and 10)
 * Level 1 [square]
 * Level 2 [square by function call]: add "draw a square"
 * Level 3 [3 squares]
 * Level 4 [36 squares]
 * Level 5 [nested squares without controls_for]
 * Level 6 [nested squares with controls_for]
 * Level 7 [mini-spiral]
 * Level 8 [3 snowmen]: add "draw a snowman"
 * Level 9 [snowman family]
 * Level 10 [free play]
 *
 * PAGE 3
 * ======
 * Categories are used, with contents of:
 * - Actions
 *   - draw_move with math_number
 *   - draw_turn with math_number
 * - Color
 *   - draw_colour (set colour) with colour_picker
 *   - draw_colour (set colour) with colour_random
 * - Functions (Replaced with custom category at level 2)
 *   - [call] draw a circle
 *   - [call] draw a square
 * - Loops
 *   - controls_for
 *   - controls_repeat
 * - Math
 *   - math_number
 * - Variables (added at level 6)
 *   - get counter
 * Variables and functions are manually added until Levels 7 and 8,
 * when the custom categories are used
 * Level 1 [call "draw a square"]
 * Level 2 [create and call "draw a triangle"]
 * Level 3 [use "draw a square" and "draw a triangle" to fence animals]
 * Level 4 [draw a house]
 * Level 5 [create and call "draw a house"]
 * Level 6 [add parameter to "draw a triangle"]
 * Level 7 [add parameter to "draw a house"]
 * Level 8 [modify end location of "create a house"]
 * Level 9 [call "draw a house" with for loop]
 * Level 10 [free play]
 */
{template .toolbox}
  <xml id="toolbox" style="display: none;">
    {if $ij.page == 1}
      <block type="draw_move_by_constant"></block>">
      <block type="draw_turn_by_constant{if $ij.level <= 8}_restricted{/if}">
        <title name="VALUE">90</title>
      </block>
      {if $ij.level >= 2}
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_picker"></block>
          </value>
        </block>
      {/if}
      {if $ij.level >= 4}   // Out of numeric order to make colour blocks adjacent.
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_random"></block>
          </value>
        </block>
      {/if}
      {if $ij.level >= 3}
        <block type="controls_repeat">
          <title name="TIMES">4</title>
        </block>
      {/if}
      {if $ij.level == 10}
        <block type="draw_width" inline="false" x="158" y="67">
          <value name="WIDTH">
            <block type="math_number">
              <title name="NUM">1</title>
            </block>
          </value>
        </block>
      {/if}
    {elseif $ij.page == 2 or $ij.page == 3}
      // Actions: draw_move, draw_turn.
      <category name="{msg meaning="Turtle.catTurtle" desc="TODO"}Actions{/msg}">
        <block type="draw_move">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">100</title>
            </block>
          </value>
        </block>
        {if $ij.page == 2 and $ij.level >= 8}
          <block type="jump">
            <value name="VALUE">
              <block type="math_number">
                <title name="NUM">50</title>
              </block>
            </value>
          </block>
        {/if}
        <block type="draw_turn">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">90</title>
            </block>
          </value>
        </block>
      </category>
      // Colour: draw_colour with colour_picker and colour_random.
      <category name="{msg meaning="Turtle.catColour" desc="TODO"}Color{/msg}">
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_picker"></block>
          </value>
        </block>
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_random"></block>
          </value>
        </block>
      </category>
      // Functions differ depending on page and level.
      {if $ij.page == 2 and $ij.level >= 2}
        <category name="{msg meaning="Turtle.catProcedures" desc="TODO"}Functions{/msg}">
          <block type="draw_a_square" inline="true">
            <value name="VALUE">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
            </value>
          </block>
          {if $ij.level >= 8}
            <block type="draw_a_snowman" inline="true">
              <value name="VALUE">
                <block type="math_number">
                  <title name="NUM">100</title>
                </block>
              </value>
            </block>
          {/if}
        </category>
      {elseif $ij.page == 3}
        {if $ij.level == 1}
          // Don't use custom category yet, since it allows function definition.
          <category name="{msg meaning="Turtle.catProcedures" desc="TODO"}Functions{/msg}">
            <block type="procedures_callnoreturn">
              <mutation name="draw a circle"></mutation>
            </block>
            <block type="procedures_callnoreturn">
              <mutation name="draw a square"></mutation>
            </block>
          </category>
        {else}
          <category name="{msg meaning="Turtle.catProcedures" desc="TODO"}Functions{/msg}" custom="PROCEDURE"></category>
        {/if}
      {/if}
      // Control: controls_for_counter (from page 2, level 5) and repeat.
      <category name="{msg meaning="Turtle.catControl" desc="TODO"}Loops{/msg}">
        {if ($ij.page == 2 and $ij.level >= 5) or ($ij.page == 3 and $ij.level >= 9)}
          <block type="controls_for_counter">
            <value name="FROM">
              <block type="math_number">
                <title name="NUM">1</title>
              </block>
            </value>
            <value name="TO">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
            </value>
            <value name="BY">
              <block type="math_number">
                <title name="NUM">10</title>
              </block>
            </value>
          </block>
        {/if}
        <block type="controls_repeat">
          <title name="TIMES">4</title>
        </block>
      </category>
      // Math: Just number blocks until final level.
      <category name="{msg meaning="Turtle.catMath" desc="TODO"}Math{/msg}">
        <block type="math_number"></block>
        {if $ij.level == 10}
          <block type="math_arithmetic" inline="true"></block>
          <block type="math_random_int">
            <value name="FROM">
              <block type="math_number">
                <title name="NUM">1</title>
              </block>
            </value>
            <value name="TO">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
          </value>
        </block>
        <block type="math_random_float"></block>
      {/if}
      </category>
      // Variables depends on page and level, although we never use the custom category
      // because we want to offer simplified getters and no setters.
      {if $ij.page == 2 and $ij.level >= 6}
        <category name="{msg meaning="Turtle.catVariables" desc="TODO"}Variables{/msg}">
          <block type="variables_get_counter"></block>
        </category>
      {elseif $ij.page == 3 and $ij.level >= 6}
        <category name="{msg meaning="Turtle.catVariables" desc="TODO"}Variables{/msg}">
          {if $ij.level >= 9}
            <block type="variables_get_counter"></block>
          {/if}
          {if $ij.level >= 7}
            <block type="variables_get_height"></block>
          {/if}
          {if $ij.level == 6 or $ij.level == 10}
            <block type="variables_get_length"></block>
          {/if}
        </category>
      {/if}
    {/if}
  </xml>
{/template}
