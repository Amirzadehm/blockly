#summary How to create custom blocks.
#labels Phase-Implementation

= Introduction =

This document is aimed at developers who wish to create new blocks within Blockly.  It is assumed that one has a local copy of Blockly which one can edit, one is generally familiar with Blockly's usage, and one has a basic understanding of JavaScript or some similar language.

There are two parts to this process.  The first part is to create a block; specifying its shape, labels, and connection points.  This is done in the `language/` directory.  The second part is to create the generator code to export the new block to a programming language (such as JavaScript, Dart, or Python).  This is done in the `generators/` directory.

In most cases the easiest approach is to just find a really similar block which already exists, copy it, and modify it as needed.  The following documentation is for those who need more help.  If all else fails, post in the [http://groups.google.com/group/blockly support newsgroup].

= Creating a Block =

Go to the `language/` directory, and open the directory containing the human language you wish to develop with (`en/` is English).

Assuming your block(s) don't fit in the existing categories, create a new !JavaScript file.  It should start with this definition:
{{{
if (!Blockly.Language) Blockly.Language = {};
}}}

This new !JavaScript file needs to be included in the list of `<script ...>` tags in the editor's HTML file.

A typical block definition looks like this:
{{{
Blockly.Language.text_length = {
  category: 'Text',
  helpUrl: 'http://www.w3schools.com/jsref/jsref_length_string.asp',
  init: function() {
    this.setColour(160);
    this.setOutput(true, Number);
    this.appendInput('length', Blockly.INPUT_VALUE, 'VALUE', String);
    this.setTooltip('Returns number of letters in the provided text.');
  }
};
}}}

http://blockly.googlecode.com/svn/wiki/text_length.png

  * `text_length` is the name of the block.  Since all blocks share the same namespace, it is good to use a name made up of your category (in this case `text`) followed by your block's function (in this case `length`).
  * `category` is the text of the menu option in Blockly's main toolbar which will contain the block.  Categories are listed in the order they are loaded, so if your blocks are appearing in the wrong place, move your `<script ...>` tag higher or lower with respect to the other language definitions.
  * `helpUrl` is the URL of the page which should open when the user right-clicks on the block and chooses help.  If this value is `null` then the menu will be greyed out.  Advanced blocks may specify a function (instead of a static string) which returns a URL string, thus allowing for dynamic help.
  * `init` is a function which defines the look and feel of the block.

== Init Function ==

The `init` function creates the block's shape.  In the context of this function the keyword `this` is the actual block being created.  There are several functions commonly used in an `init` function:

  * [#setColour setColour]
  * [#setPreviousStatement setPreviousStatement]
  * [#setNextStatement setNextStatement]
  * [#setOutput setOutput]
  * [#appendTitle appendTitle]
  * [#appendInput appendInput]
  * [#setInputsInline setInputsInline]
  * [#setTooltip setTooltip]

=== setColour ===

{{{
    this.setColour(160);
}}}
Blockly uses a [http://en.wikipedia.org/wiki/HSL_and_HSV Hue-Saturation-Value] (HSV) colour model.  Saturation and Value are hard-coded into Blockly, whereas the Hue is defined on each block.  This ensures that developers have the freedom to choose from a wide range of colours, while still guaranteeing that all the blocks will fit together visually.  It also allows the entire Blockly look and feel to be made brighter (for children) or more depressing (for businesses) by simply adjusting the two hard-coded Saturation and Value constants.

http://blockly.googlecode.com/svn/wiki/HSV.png

To find a good colour, visit this [http://www.yafla.com/yaflaColor/ColorRGBHSL.aspx HSV picker], enter Blockly's Saturation and Value constants (the defaults are 45% and 65% respectively), then slide the Hue as desired.  Use this Hue value as the argument to the `this.setColour` function.  Note the British spelling.  Failure to set the colour results in a black block.

=== setPreviousStatement ===

{{{
    this.setPreviousStatement(true);
}}}

http://blockly.googlecode.com/svn/wiki/setPreviousStatement.png

Creates a notch at the top of the block, so that it may be plugged into a stack of statements.  Normally combined with `setNextStatement` (see below).  Blocks with a previous statement notch may not also have an output tab.

=== setNextStatement ===

{{{
    this.setNextStatement(true);
}}}

http://blockly.googlecode.com/svn/wiki/setNextStatement.png

Creates a notch at the bottom of the block, so that other statements may be stacked below it.  Unless this block terminates flow (e.g. break, return, or end), this is normally combined with `setPreviousStatement` (see above).

=== setOutput ===

{{{
    this.setOutput(true, Number);
}}}

http://blockly.googlecode.com/svn/wiki/setOutput.png

Value blocks (as opposed to statements) need an output tab.  Blocks with an output tab may not also have a previous statement notch.

This function also defines the expected value type that this block will output.  A block that outputs a number will refuse to connect to a block that inputs a string (e.g. `length(123)` does not make sense).  Blockly uses `Boolean`, `Number`, `String`, and `Array` as constants for the built-in types.  If creating a new type, use a short descriptive string, such as `"Date"`.

In the event that the block could return more than one type of value, use an array of types (e.g. `[Number, "Date"]`).  If the block could return any type of value (such as a variable's getter block), use `null` as the value.

=== appendTitle ===

{{{
    this.appendTitle('hello');
}}}

http://blockly.googlecode.com/svn/wiki/appendTitle.png

A block contains a title row, which can contain any number of title elements.  The simplest title element is text.  Blockly's convention is to use all lowercase text, with the exception of proper names (e.g. Google, SQL).

{{{
    var textInput = new Blockly.FieldTextInput('Neil');
    this.appendTitle(textInput, 'NAME');
}}}

http://blockly.googlecode.com/svn/wiki/appendTitleTextInput.png

Another title element is a text input field.  First, create the field, then append it to the title row.  Since the code generators will eventually need to access the data in this title element, be sure to give it a name (in this case `'NAME'`).  This name is never seen by the user and should be consistent across all human language versions of the block.

Optionally, the `FieldTextInput` constructor can also take a second argument which becomes the validation function.  See `math_number` for an example of where the user's input is rewritten.

{{{
    var dropdown = new Blockly.FieldDropdown([['world', 'WORLD'], ['computer', 'CPU']]);
    this.appendTitle(dropdown, 'MODE');
}}}

http://blockly.googlecode.com/svn/wiki/appendTitleDropdown.png

Another title element is a dropdown menu.  Just like the text input field, the dropdown menu is created separately, then appended to the title row.  The `FieldDropdown` object is created with a list of menu options.  Each option is made up of two strings.  The first is the human-readable text to display.  The second is a string constant which is used when saving the option to XML.  This separation allows a dropdown menu's setting to be preserved between languages.  For instance an English (`en/`) version of a block may define `[['left', 'LEFT'], ['right', 'RIGHT']]` while a German (`de/`) version of the same block would define `[['links', 'LEFT'], ['rechts', 'RIGHT']]`.

Instead of providing a static list of options, one can provide a function that returns a list of options when called.  This allows for dynamic menus.  See `variables_get` got an example.

Optionally, the `FieldDropdown` constructor can also take a second argument which becomes the validation function.  See `text_trim` for an example of where changing a dropdown modifies a title.

=== appendInput ===

Coming soon...

=== setInputsInline ===

Coming soon...

=== setTooltip ===

{{{
    this.setTooltip('Returns number of letters in the provided text.');
}}}

Tooltips offer instant help when the user hovers their mouse over the block.  Longer strings should include line breaks (`\n`) since the text does not wrap automatically.

Tooltips may also be defined as a function instead of a static string.  This allows for dynamic help.  See `math_arithmetic` for an example of a tooltip that changes depending on which dropdown option has been chosen.